// <auto-generated />
using CinemaApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407165017_Seeding Data Again")]
    partial class SeedingDataAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaApp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("CinemaApp.Models.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Categories")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categories = 0,
                            Description = "Harry Potter learns he's a wizard and attends Hogwarts. He faces many challenges, including discovering the truth about his parents' death and Voldemort's return.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS1jr5jmHTMu5Hv04GjrZG5EaaD5zYshberRA&s",
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = 2,
                            Categories = 0,
                            Description = "In a dystopian future, hacker Neo learns that reality as he knows it is a simulated construct created by machines to subdue the human population. With the help of a rebel group, he begins to fight back against the machines and discovers his true potential.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQQxjuaNUQXt5TOG8HPVClcQMJ76r6aHlGqzw&s",
                            Title = "The Matrix"
                        },
                        new
                        {
                            Id = 3,
                            Categories = 0,
                            Description = "When the menace known as The Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham. Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQP3-1_Sx_WFXRqb2NpigiDkggpQ5ovXavR9w&s",
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            Id = 4,
                            Categories = 3,
                            Description = "During a preview tour, a theme park suffers a major power breakdown that allows its cloned dinosaur exhibits to run wild. A group of people must escape from the island alive as prehistoric creatures hunt them down.",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRfQ9vdwTdbTw4SupATzd7Z2jqW9iCRfrXxag&s",
                            Title = "Jurassic Park"
                        });
                });

            modelBuilder.Entity("CinemaApp.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CinemaApp.Models.Movies", b =>
                {
                    b.HasOne("CinemaApp.Models.AppUser", "AppUser")
                        .WithMany("Movies")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("CinemaApp.Models.Reviews", b =>
                {
                    b.HasOne("CinemaApp.Models.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaApp.Models.Movies", "Movies")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CinemaApp.Models.AppUser", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CinemaApp.Models.Movies", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
